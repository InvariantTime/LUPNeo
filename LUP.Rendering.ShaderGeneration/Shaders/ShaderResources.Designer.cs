//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LUP.Rendering.ShaderLanguage.Shaders {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ShaderResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ShaderResources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LUP.Rendering.ShaderLanguage.Shaders.ShaderResources", typeof(ShaderResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на namespace LUPNeo
        ///{
        ///    shader SceneData
        ///    {
        ///	    cbuffer SceneData {
        ///    		mat4 projection;
        ///            mat4 view;
        ///            mat4 viewWithoutPos;
        ///            vec3 viewPos;
        ///            vec2 resolution;
        ///            float time;
        ///            vec3 ambient;
        ///    	} scene_data;
        ///    }
        ///}.
        /// </summary>
        internal static string SceneData {
            get {
                return ResourceManager.GetString("SceneData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на namespace LUPNeo
        ///{
        ///	shader BaseShader
        ///	{
        ///		void main() {}
        ///	}
        ///
        ///	shader Object : BaseShader
        ///	{
        ///		override void main()
        ///		{
        ///		}
        ///	}
        ///}.
        /// </summary>
        internal static string ShaderBase {
            get {
                return ResourceManager.GetString("ShaderBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на %token ID
        ///%token NAMESPACE
        ///%token LBRA
        ///%token RBRA
        ///%token SHADER
        ///%token NUMBER
        ///%token VALUETYPE
        ///
        ///PROGRAM: NAMESPACES;
        ///NAMESPACES: NAMESPACE ID LBRA SHADERS RBRA | NAMESPACES NAMESPACE;
        ///SHADERS: SHADER ID LBRA RBRA | SHADERS SHADER;.
        /// </summary>
        internal static string ShaderGrammar {
            get {
                return ResourceManager.GetString("ShaderGrammar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на namespace LUPNeo
        ///{
        ///	shader Shader1
        ///	{
        ///	}
        ///
        ///	shader Shader2
        ///	{
        ///	}
        ///}
        ///
        ///namespace LUPNeo2// это пространство имен под названием LUPNeo2
        ///{
        ///	shader Shader1
        ///	{
        ///		void main()/*главный метод*/
        ///		{
        ///		}
        ///	}
        ///}.
        /// </summary>
        internal static string TestShader {
            get {
                return ResourceManager.GetString("TestShader", resourceCulture);
            }
        }
    }
}
